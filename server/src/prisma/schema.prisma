// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId    String     @id @default(cuid())
  email     String     @unique
  userName  String
  password  String
  isActive  Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  roles     UserRole[]
  stidents  Students[]
  techers   Teachers[]
}

model Role {
  roleId    String     @id @default(cuid())
  roleName  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  users     UserRole[]
}

model UserRole {
  userId String
  roleId String
  user   User   @relation(fields: [userId], references: [userId])
  role   Role   @relation(fields: [roleId], references: [roleId])

  @@id([userId, roleId])
}

enum CourseCategory {
  FRONTEND
  BACKEND
  FULLSTACK
  DEVOPS
  TESTING
}

model Course {
  courseId          String             @id @default(cuid())
  courseName        String
  description       String
  category          CourseCategory
  courseAssignments CourseAssignment[]
  lessons           Lessons[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now())
}

model Group {
  groupId          String             @id @default(cuid())
  groupName        String
  students         Students[]
  CourseAssignment CourseAssignment[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model Teachers {
  teacherId                    String           @id @default(cuid())
  user                         User             @relation(fields: [userId], references: [userId])
  userId                       String
  courseAssignments            CourseAssignment @relation(fields: [courseAssignmentAssignmentId], references: [assignmentId])
  courseAssignmentAssignmentId String
}

model Students {
  studentId String @id @default(cuid())
  user      User   @relation(fields: [userId], references: [userId])
  userId    String
  groupId   String
  group     Group  @relation(fields: [groupId], references: [groupId])

  @@unique([userId, groupId])
}

model CourseAssignment {
  assignmentId String     @id @default(cuid())
  courseId     String
  course       Course     @relation(fields: [courseId], references: [courseId])
  groupId      String
  group        Group      @relation(fields: [groupId], references: [groupId])
  startDate    DateTime
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  teachers     Teachers[]

  @@unique([courseId, groupId])
}

model Lessons {
  lessonId    String @id @default(cuid())
  courseId    String
  course      Course @relation(fields: [courseId], references: [courseId])
  title       String
  description String
}
